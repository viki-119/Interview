1.css的盒子模型：
内容(content)、填充(padding)、边框(border)、边界(margin)
  内容（content）就是盒子里装的东西；
  而填充(padding)就是怕盒子里装的东西（贵重的）损坏而添加的泡沫或者其它抗震的辅料；
  边框(border)就是盒子本身了；
  至于边界(margin)则说明盒子摆放的时候的不能全部堆在一起，要留一定空隙保持通风，同时也为了方便取出。
  
2.如何用js给dom添加css样式：http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html
  一、局部改变样式 
    ~~~给样式表（包括内部样式和外部样式）添加样式：
        *  document.styleSheets[0].addRule("#id1","color:blue");
        *   var cssStr="#id1 {color:green;}";
            document.styleSheets.item(document.styleSheets.length-1).cssText=cssStr;//ie好用 其他不好用
    ~~~改变class的名字  ：http://www.jb51.net/article/28118.htm
        *调用方法设置className，会覆盖原有的class：     document.getElementById('id1').className="class2"; 
                    获取class的名字：                   document.getElementById("id1").className;
                    判断元素有无class属性：             document.getElementById("id1").hasAttribute("class");
                    jQuery判断有无某一个具体的样式：    $("#d1").hasClass("class2");
         使用这种方法可以设置样式，同时也会覆盖之前写的样式；domObj.setAttribute("class","class3");
         jQuery如果通过属性来设置样式，也会覆盖掉之前的样式：$("#d1").attr("class","areaon");
                    获取class的名字：                        domObj.getAttribute("class");
                    jQuery追加样式（js无追加样式的方法）：   $("#d1").addClass("areaon");
                    jQuery移除某一个样式（保留其他样式）：   $("#d1").removeClass("areaon");
                    jQuery移除class属性，然后在添加样式 ：   $("#d1").removeAttr("class").attr("class","areaon");
         
    ~~~改变内联样式直接样式   
        *改变内联样式直接样式:document.getElementById('id1').style.backgroundColor="red";
                              document.getElementById("id1").style.color;（获取不到颜色的值）
                              jQuery给内联样式添加样式：$("#id1").css({color:"blue"});
                              jQuery获取css样式里的值： $("#d1").css("width");

  二、全局改变样式 
      可以通过改变外链样式的的href的值实现网页样式的实时切换
      <link rel = "stylesheet" type="text/css" id="css" href="firefox.css" /> 
      <span onclick="javascript:document.getElementById('css').href = 'ie.css'">点我改变样式</span>
      
3.prototype   原型：http://www.cnblogs.com/yjf512/archive/2011/06/03/2071914.html
    ~~~ 原型法设计模式：
        原型法的主要思想是，现在有1个类A,我想要创建一个类B,这个类是以A为原型的,并且能进行扩展。我们称B的原型为A。
        
    ~~~ javascript的方法可以分为三类：
        a.类方法
        b.对象方法
        c.原型方法
        <script>
            function People(name){
                this.name=name;
                <!--对象方法-->
                this.Introduce=function(){
                    alert("My name is "+this.name);
                }
            }
            <!--类方法-->
            People.Run=function(){
                alert("I can run");
            }
            <!--原型方法-->
            People.prototype.IntroduceChinese=function(){
                alert("我的名字是"+this.name);
            }
            <!--测试-->
            var p1=new People("john");
            p1.Introduce();
            People.Run();
            p1.IntroduceChinese();
        </script>
        
      ~~~prototype是什么含义？
          javascript中的每个对象都有prototype属性，Javascript中对象的prototype属性的解释是：返回对象类型原型的引用。
          A.prototype = new B();
          理解prototype不应把它和继承混淆。A的prototype为B的一个实例，可以理解A将B中的方法和属性全部克隆了一遍。
          A能使用B的方法和属性。这里强调的是克隆而不是继承。
          可以出现这种情况：A的prototype是B的实例，同时B的prototype也是A的实例。
          
          * 我们首先定义了baseClass类，然后我们要定义extentClass类，但是我们打算以baseClass的一个实例为原型来克隆，
            extendClass同时包含showMsg这个对象方法。
            extendClass.prototype = new baseClass()就可以阅读为：extendClass是以baseClass的一个实例为原型克隆创建的。
          * 如果extendClass中本身包含有一个与baseClass同名的对象方法该如何执行？
            函数运行时会先去本体的函数中去找，如果找到则运行，找不到则去prototype中寻找函数。或者可以理解为prototype不会克隆同名函数。
          * 如果我想使用extendClass的一个实例instance调用baseClass的对象方法showMsg怎么办？
            答案是可以使用call
            extendClass.prototype = new baseClass();
            var instance = new extendClass();
            var baseinstance = new baseClass();
            baseinstance.showMsg.call(instance);//显示baseClass::showMsg
            
            <script type="text/javascript">
                function baseClass() {
                    this.showMsg = function() {
                        alert("baseClass::showMsg");
                    }
                    this.baseShowMsg = function() {
                        alert("baseClass::baseShowMsg");
                    }
                }
            //    类方法
                baseClass.showMsg = function() {
                    alert("baseClass::showMsg static");
                }
            
                function extendClass() {
                    this.showMsg =function () {
                        alert("extendClass::showMsg");
                    }
                }
                extendClass.showMsg = function() {
                    alert("extendClass::showMsg static")
                }
            
                extendClass.prototype = new baseClass();
                var instance = new extendClass();
            
                instance.showMsg(); //显示extendClass::showMsg
                instance.baseShowMsg(); //显示baseClass::baseShowMsg
            
                baseClass.showMsg.call(instance);//显示baseClass::showMsg static   //extends强制调用baseClass的类方法
            
                var baseinstance = new baseClass();
                baseinstance.showMsg.call(instance);//显示baseClass::showMsg  //extends强制调用baseClass的对象方法
            </script>
    
